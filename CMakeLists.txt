# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

# Regenerate CMakeLists.txt automatically in the root project
set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)
endif()

# Create a configure-time dependency on cmake.toml to improve IDE support
if(CMKR_ROOT_PROJECT)
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

project(retro
	LANGUAGES
		CXX
)

if(CMAKE_SYSTEM_PROCESSOR MATCHES "(amd64)|(AMD64)|(x86_64)") # x86_64
	# zydis
	set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
	if(CMAKE_FOLDER)
		set(CMAKE_FOLDER "${CMAKE_FOLDER}/zydis")
	else()
		set(CMAKE_FOLDER zydis)
	endif()
	add_subdirectory(zydis)
	set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})

endif()
# Target libretro
set(CMKR_TARGET libretro)
set(libretro_SOURCES "")

list(APPEND libretro_SOURCES
	"libretro/src/main.cpp"
	"libretro/src/platform.cpp"
	"libretro/include/retro/arch/x86/zydis.hpp"
	"libretro/include/retro/bitset.hpp"
	"libretro/include/retro/common.hpp"
	"libretro/include/retro/coro.hpp"
	"libretro/include/retro/ctti.hpp"
	"libretro/include/retro/diag.hpp"
	"libretro/include/retro/dyn.hpp"
	"libretro/include/retro/format.hpp"
	"libretro/include/retro/func.hpp"
	"libretro/include/retro/graph/naive.hpp"
	"libretro/include/retro/graph/search.hpp"
	"libretro/include/retro/hashers.hpp"
	"libretro/include/retro/intrin.hpp"
	"libretro/include/retro/ir/basic_block.hpp"
	"libretro/include/retro/ir/insn.hpp"
	"libretro/include/retro/ir/procedure.hpp"
	"libretro/include/retro/ir/types.hpp"
	"libretro/include/retro/ir/value.hpp"
	"libretro/include/retro/list.hpp"
	"libretro/include/retro/lock.hpp"
	"libretro/include/retro/platform.hpp"
	"libretro/include/retro/rc.hpp"
	"libretro/include/retro/utf.hpp"
	"libretro/include/retro/ir/builtin_types.hxx"
	"libretro/include/retro/ir/opcodes.hxx"
	"libretro/include/retro/ir/ops.hxx"
	"libretro/include/retro/targets.hxx"
)

list(APPEND libretro_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${libretro_SOURCES})
add_library(libretro STATIC)

if(libretro_SOURCES)
	target_sources(libretro PRIVATE ${libretro_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${libretro_SOURCES})

target_compile_features(libretro PUBLIC
	cxx_std_20
)

target_include_directories(libretro PUBLIC
	"libretro/include"
)

if(CMAKE_SYSTEM_PROCESSOR MATCHES "(amd64)|(AMD64)|(x86_64)") # x86_64
	target_link_libraries(libretro PUBLIC
		Zydis
	)
endif()

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target retro
set(CMKR_TARGET retro)
set(retro_SOURCES "")

list(APPEND retro_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${retro_SOURCES})
add_executable(retro)

if(retro_SOURCES)
	target_sources(retro PRIVATE ${retro_SOURCES})
endif()

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT retro)
endif()

target_link_libraries(retro PRIVATE
	libretro
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

install(
	TARGETS
		retro
	DESTINATION
		bin
	COMPONENT
		retro
)
